{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bioinformatics material","text":"<p>This is an initial deployment of a website focused on understanding fundamental bioinformatics concepts. Here, I share essential materials needed for general bioinformatics work.</p> <p>It's currently under construction, so you might encounter some typos :(</p>"},{"location":"support/","title":"Support","text":""},{"location":"support/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal.</p> <p> GitHub Sponsors  PayPal</p>"},{"location":"blog/","title":"Index","text":"<p>Here, I have compiled General posts that are useful for students and researchers. </p> <p>Most recent posts are: </p> <ul> <li>Container</li> <li>Login Issues</li> </ul>"},{"location":"blog/2024/10/27/bash-cheat-sheet/","title":"Bash cheat sheet","text":"<p>Here are the bash scripts you frequently use to accomplish your tasks.</p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#user-information","title":"User Information","text":""},{"location":"blog/2024/10/27/bash-cheat-sheet/#who-command","title":"<code>who</code> command","text":"<p>It is used to retrieve information about the currently logged-in user on the system. <pre><code>who\n</code></pre></p> <p>It provides the following information: <pre><code>Login name of the user \nUser terminal\nDate &amp; Time of login\nRemote host name of the user\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#whoami-command","title":"<code>whoami</code> command","text":"<p>It displays the system\u2019s username: <pre><code>whoami\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#id-command","title":"<code>id</code> command","text":"<p>It displays the user identification, including the user ID and group ID:</p> <pre><code>id \n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#system-information","title":"System information","text":"<p>To display system and hardware information, you can use <code>uname</code> command with various options.</p> command description <code>uname -a</code> print system information <code>uname -s</code> kernel name <code>uname -r</code> kernel release <code>uname -m</code> system architecture <code>uname -o</code> operation system"},{"location":"blog/2024/10/27/bash-cheat-sheet/#file-and-directory-commands","title":"File and directory commands","text":""},{"location":"blog/2024/10/27/bash-cheat-sheet/#pwd-command","title":"<code>pwd</code> command","text":"<p>This command displays the current working directory. We often use it with the <code>-P</code> flag, which shows the physical directory without any symbolic links:</p> <pre><code>pwd -P\n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#ls-command","title":"<code>ls</code> command","text":"<p>It displays a list of files and directories. <pre><code>ls\n</code></pre> or can use it with the following flags:</p> <pre><code>-a Show all files\n-R list subdirectories recursively\n-r Reverse order\n-t Sort by last modified\n-S Sort by file size, largest first\n-l Use a long listing format\n-1 One file per line\n-m Comma-\u00adsep\u00adarated output\n-Q Quoted output\n</code></pre> <p>The following command displays all files, including hidden ones. <pre><code>ls -a \n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#mkdir-command","title":"<code>mkdir</code> command","text":"<p><code>mkdir</code> creates the directories <pre><code>mkdir ./folder \n</code></pre> The <code>-p</code> flag can be used to create multiple directories at once.</p> <pre><code>mkdir -p ./folder/folder2/folder3 \n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#rm-command","title":"<code>rm</code> command","text":"<p>It removes directories and files. To remove a file, <pre><code>rm file.txt\n</code></pre></p> <p>To remove files forcefully without prompting for confirmation, use the <code>-f</code> flag. <pre><code>rm -f file.txt\n</code></pre></p> <p>To remove a directory, use the <code>-r</code> flag. <pre><code>rm -r folder\n</code></pre></p> <p>To move files or folders forcefully, use the <code>-rf</code> flag. <pre><code>rm -rf folder\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#touch-command","title":"<code>touch</code> command","text":"<p>It can be used to create, change, and modify timestamps. The following commands create a file and multiple files, respectively: <pre><code>touch file1.txt\ntouch file2.txt  file3.txt\n</code></pre></p> <p>Change only the modification time. <pre><code>touch -m file2.txt\n</code></pre></p> <p>Change only the access time. <pre><code>touch -a file2.txt\n</code></pre></p> <p>Use the timestamps of other files. <pre><code>touch -r file1.txt file2.txt\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#cat-command","title":"<code>cat</code> command","text":"<p>The <code>cat</code> command is used to create single or multiple files, view the contents of a file, concatenate files, and redirect output to the terminal or to files.</p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#how-create-file","title":"How create file","text":"<p>By using the following command, you can create a file and add content. Once you\u2019re done, press <code>Ctrl+D</code>.</p> <pre><code>cat &gt; file1.txt\nYou care creating a file\n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#how-view-content","title":"How view content","text":"<p>View the content  <pre><code>cat  file1.txt file2.txt\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#how-view-content-of-large-file","title":"How view content of large file","text":"<p>If you have a large file that does not fit in the terminal, use <code>more</code> and  <code>less</code></p> <pre><code>cat file.txt | more #show page by page\ncat file.txt | less #show line by line\n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#file-permissions","title":"File permissions","text":"<p>You can define the access levels for files and folders to prevent people from accessing other users\u2019 data without permission.</p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#ownership","title":"Ownership","text":"<p>Each file\\folder has three parts:  u: user\\owner of file who created it.   g: group of user who has access permissions of files\\directories.   o: other users.</p> <p>The following command shows the permissions of files and folders. <pre><code>mkdir folder1\ntouch ./folder1/file.sh\ntouch ./folder1/file1.sh\nls -l ./folder1\nls -l file.sh\n</code></pre></p> <p>You can see it has four parts.  1- first one digit: \"-\" or \"d\" 2- second three digits: it shows the permission of owner.  3- third three digits: designate permissions for the group.  4- fourth three digits: designate permissions for the group. </p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#permissions","title":"Permissions","text":"<p>Each file or folder has three types of owners:  - Read: It gives permission to open  - Write: Permission to modify the contents of  files\\folders.   - Execute: Give permission to run it.  </p> <p>The following shows the indicators of the permissions: <pre><code>  r = read permission = 4\n  w = write permission = 2\n  x = execute permission = 1\n  - = no permission = 0 \n</code></pre></p> <p>The following diagram shows the permissions.</p> Diagram Symbol Number Permission Type --- 0 No Permission --x 1 Execute -w- 2 Write -wx 3 Execute + Write r-- 4 Read r-x 5 Read + Execute rw- 6 Read + Write rwx 7 Read + Write + Execute"},{"location":"blog/2024/10/27/bash-cheat-sheet/#change-access","title":"Change access","text":""},{"location":"blog/2024/10/27/bash-cheat-sheet/#chmod","title":"chmod","text":"<p>It can be used to change the access mode. This command sets permissions (read, write, execute) on a file or directory for the owner, group, and others.</p> <p><pre><code>chmod [reference][operator][mode] file\\folder\n</code></pre> reference: u,g,o  operator: The plus (\"+\") sign indicates give permission.  The minus (\"-\") sign indicates remove permission.  mode: r,w,x </p> <p>Examples  chmod a+r files:  readable by all   chmod a-r files: cancels the ability for all to read the file   chmod a-rwx cancels all access for all   chmod g+rw files give the group read and write permission   chmod u+rwx files give the owner all permissions  chmod og+rw files give the world and the group read and write permission  </p> <p>The following command is a common command:  chmod 755 file.txt:   Owner can read, write, execute files   Group can read and execute (use) but not change files.  Other can read and execute (use) but not change.  </p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#chown-command","title":"<code>chown</code> command","text":"<p>You can change the user and group. <pre><code>chmod user:group file\\folder\nchmod -R user:group file\\folder\n</code></pre></p> <p>With the <code>-R</code> flag, you can change the ownership of the directory and all its contents recursively.</p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#chgrp-command","title":"<code>chgrp</code> command","text":"<p>It can be used to change the group owner. The <code>chgrp</code> and <code>chown</code> commands use the same system call and are functionally identical.</p> <pre><code>chgrp -R group file\\folder\n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#disk-usage","title":"Disk usage","text":"<p>You can use <code>du [option] [file/folder]</code> to check disk usage. The command <code>du ./folder</code> shows the disk usage summary of the <code>/folder</code> directory tree and each of its subdirectories. <code>du -h ./folder</code>:  to o determine the disk usage in a human-readable format.   <code>du -sh ./folder</code>: to find out the total disk usage.   <code>du  -ah /home/</code>: To determine the total disk usage of files and directories.  <code>du  -ah --max-depth 2 /home/</code>: show total disk usage of all files and directories up to a certain depth.  <code>du -ah --exclude=\"*.txt\" /home/</code>: to find the total disk usage of files and directories while excluding files that match a given pattern.</p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#networking","title":"Networking","text":"<p>Display all network information.  <pre><code>ipconfig -a \n</code></pre></p> <p>Test the connection to a remote machine: <pre><code>ping &lt;ip-address&gt; or hostname\n</code></pre></p> <p>Displays active or listening ports. <pre><code>netstat -pnltu\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#find-command","title":"<code>find</code> command","text":"<p>You can use find to search for files and directories. The following command searches for <code>.txt</code> files: <pre><code>find ./directory -type f -name '*.txt'\n</code></pre> Search for empty files in the directory:  <pre><code>find ./directory -type f -empty\n</code></pre></p> <p>Search for files with the specified permissions. <pre><code>find ./directory -type f -perm 755\n</code></pre></p> <p>If you are looking for the path of command, use <code>whereis</code>, <pre><code>whereis python3\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#search-pattern-in-file","title":"Search pattern in File","text":"<p>You can use <code>grep</code> command to search pattern in file. <code>grep pattern files</code>. The following  search for \"hello\" in the file. <pre><code>grep \"hello\" file.txt \n</code></pre></p> <p>If you want the command to be case-sensitive, use the <code>-i</code> flag. <pre><code>grep -i \"hello\" file.txt\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#ps-command","title":"<code>ps</code> command","text":"<p>The <code>ps</code> command displays information about a selection of active processes. <pre><code>ps\n</code></pre></p> <p>You can terminate active processes as follows: <pre><code>kill &lt;process_id&gt;\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#curl-command","title":"<code>curl</code> Command","text":"<p>This command can be used to transfer data to or from a server. It supports various protocols, including HTTP, HTTPS, FTP, SFTP, etc. You can easily request an HTML page or a file. <pre><code>curl -o aa.htlm  https://saeidamiri1.github.io/\n</code></pre></p> <p>Downloads a file and saves it with the same name as in the URL: <pre><code>curl -O   https://saeidamiri1.github.io/\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#handling-http-requests","title":"Handling HTTP Requests","text":"<p>It allows you to send custom HTTP requests using various methods such as GET, POST, PUT, DELETE, etc. For instance, to send a GET request: <pre><code>curl -X GET https://api.example.com/resource\n</code></pre></p> <p>Similarly, to send a POST request with data: <pre><code>curl -X POST -d \"key1=value1&amp;key2=value2\" https://api.example.com/resource\n</code></pre></p> <p>Includes custom headers in the request. <pre><code>curl -H \"Content-Type: application/json\" http://example.com\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#uploading-files","title":"Uploading Files","text":"<p>In addition to downloading, you can also upload files using the <code>-T</code> flag. In the following example, the file is uploaded to the server.</p> <pre><code>curl -T uploadfile.txt ftp://example.com/upload/\n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#authentication","title":"Authentication","text":"<p>By using the <code>-u</code> flag, you can specify the password. <pre><code>curl -u username:password https://example.com/api\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#interrupted","title":"Interrupted","text":"<p>If the download is interrupted for some reason, you can use the <code>-C -</code> flag:</p> <pre><code>curl -C - -O ftp://speedtest.tele2.net/1MB.zip\n</code></pre>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#history-command","title":"<code>history</code> Command","text":"<p>The <code>history</code> command displays a list of previously issued commands. There are a couple of options that can be used to modify the history. <pre><code>history -c # clears the entire command history.\nhistory -a # appends the current session's history to the history file.\n</code></pre></p>"},{"location":"blog/2024/10/27/bash-cheat-sheet/#useful-references","title":"Useful references","text":"<p>-[ref]:  https://swcarpentry.github.io/shell-novice/</p>"},{"location":"blog/2024/10/27/container/","title":"Container","text":"<p>A container is a lightweight package of an operating system that allows users to install software and its dependencies in isolated environments (called \u2018containers\u2019), making it a single, portable, shareable, and reproducible package, like Apptainer/Singularity or Docker. Unlike virtual machines, containers are lightweight, fast, and typically run on a Linux-based system. They are often best suited for running one or two applications.</p>"},{"location":"blog/2024/10/27/container/#apptainersingularity","title":"Apptainer/Singularity","text":"<p>Apptainer/Singularity is a free and open-source container framework designed to run scientific applications on HPC-backed resources or any operating system. Unlike Docker, Singularity allows non-privileged users to work with it, making it more suitable for HPC environments. In this guide, we introduce Apptainer/Singularity and demonstrate how to set up and use Singularity. We refer to it simply as Singularity, as it was formerly known, and many users still call it by that name.</p> <p><code>singularity</code> provides a command-line interface (CLI) to interact with containers. Run singularity --help to get an overview of Singularity and ensure it is installed correctly. You can also run the following command to test it.</p> <pre><code>$ singularity run library://godlovedc/funny/lolcow\n _______________________________________\n/ Q: What's the difference between USL  \\\n| and the Titanic? A: The Titanic had a |\n\\ band.                                 /\n ---------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre>"},{"location":"blog/2024/10/27/container/#downloading-images","title":"Downloading images","text":"<p>First, create the following folders: <pre><code>mkdir -p  ~/test/data\nmkdir -p  ~/test/singularity\n</code></pre></p> <p>Now download it into the provided folder.</p> <pre><code>cd ~/test/singularity\nsingularity pull docker://godlovedc/lolcow\nls \n</code></pre>"},{"location":"blog/2024/10/27/container/#enter","title":"Enter","text":"<p>You can enter the container <pre><code>$singularity shell lolcow_latest.sif\nSingularity&gt; \n</code></pre></p> <p>Simply type an existing command in the container, e.g., <code>which cowsay</code></p> <pre><code>Singularity&gt; which cowsay\n/usr/games/cowsay\n</code></pre> <p>This method allows you to execute commands within the container.</p> <pre><code>Singularity&gt; cowsay 'I am within'\n\n __________\n&lt; I am within &gt;\n ----------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre> <p>To exit, simply type <code>exit</code>: <pre><code>Singularity&gt; exit\nexit\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#executing","title":"Executing","text":"<p>To execute a containerized command from outside the container, use the <code>exec</code> command. This enables you to run commands within the container. For example: <pre><code>$ singularity exec lolcow_latest.sif cowsay 'I am out'\n __________\n&lt; I am out &gt;\n ----------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#redirection","title":"Redirection","text":"<p>You can redirect the output to your local system for further use. <pre><code>singularity exec lolcow_latest.sif cowsay 'I am out' &gt; cowsout\ncat cowsout\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#pipes","title":"Pipes","text":"<p>You can also use pipeline techniques to execute commands with Singularity. <pre><code>cat cowsout | singularity exec lolcow_latest.sif cowsay\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#building-a-container","title":"Building a Container","text":""},{"location":"blog/2024/10/27/container/#creating-a-container","title":"Creating a container","text":"<p>If you\u2019re interested in creating your own container (called a sandbox), start with a Singularity definition file. This is a text file containing a series of instructions used to build a container image. Below is a simple definition file. In this example, we will install Python 3 and create the <code>/mydata</code> directory within the container.</p> <pre><code>cat &lt;&lt;EOF &gt; ubuntu.def\nBootstrap: library\nFrom: ubuntu:latest\n\n%runscript\n echo \"Container was created \\$NOW\"\n\n%environment\n    export LC_ALL=C\n\n%labels\n    AUTHOR saeid.amiri1@gmail.com\n    Version v0.0.1\n\n%post\n    apt-get update &amp;&amp; apt-get -y install python3 \n    mkdir /mydata\nEOF\n</code></pre> <p>The first two lines, <code>Bootstrap: library</code> and <code>From: ubuntu:latest</code>, specify that we want to pull the base image from the <code>library</code>, with the operating system being the latest version of Ubuntu. The rest of the file uses the <code>% prefix</code> to define different stages of the image build process. <code>%runscript</code>,  defines a script that will run when the container is started using the singularity run command. <code>%environment</code>,  defines environment variables for the container. <code>%labels</code> allows you to add metadata such as the author, version, etc. <code>%post</code> this section is where you can install software and pull files from remote locations. There are various options available to help you create an efficient container, see documentaion. </p> <p>By running the following code, you can create your own container. Ensure you have <code>ubuntu.img</code> in the current directory. </p> <pre><code>sudo singularity build --sandbox ubuntu.img ubuntu.def\n</code></pre>"},{"location":"blog/2024/10/27/container/#modify-containers","title":"Modify containers","text":"<p>To modify your container, use <code>shell --writable</code> <pre><code>sudo singularity shell --writable ubuntu.img\n</code></pre></p> <p>Next, install the Nano text editor and write a simple Python script. <pre><code>apt-get update\napt-get install nano\ncd /opt\nnano test.py\nprint(\"A simple code in Python\")\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#test-application","title":"Test application","text":"<p>Run the following command to execute the Python script you created in the container. <pre><code>$ singularity exec  ./ubuntu.img python3 /opt/test.py\nA simple code in Python\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#accessing-host-files","title":"Accessing Host Files","text":"<p>Singularity has access only to files within the container. Therefore, if an application requires access to a specific file, you must mount it.</p> <pre><code>mkdir ./data1\necho 'Create first file' &gt;   ./data1/test11.txt\necho 'Create second file ' &gt; ./data1/test12.txt\n</code></pre> <p>Run the following command to check if the created folder is accessible within the container. By default, all folders stored in the container folder (on the host) are mounted inside the container. <pre><code>$ singularity exec  ./ubuntu.img ls -l  ./data1\ntotal 12\n-rw-rw-r-- 1 sam sam 18 Oct  3 10:59 test11.txt\n-rw-rw-r-- 1 sam sam 20 Oct  3 10:59 test12.txt\n</code></pre></p> <p>If a folder is not in the Singularity folder, you need to mount it using the <code>--bind (-B)</code> flag, which specifies the directories that must be linked between the host and the container. <pre><code>mkdir ../data/data2\necho 'Create third file' &gt; ../data/data2/test21.txt\nsingularity exec  --bind $HOME/test/data/data2 ./ubuntu.img ls -l $HOME/test/data/data2\ntotal 4\n-rw-rw-r-- 1 sam sam 18 Oct  3 11:23 test21.txt\n</code></pre></p> <p>You can bind mount a directory to a destination in the container using the source:destination syntax. By default, Singularity bind mounts several directories into your container, including <code>$HOME</code>, <code>/tmp</code>, <code>/proc</code>, and <code>/dev</code>. For example, to mount the directory <code>$HOME/test/data/data2</code> from the local system to <code>/mydata</code> within the container, use the following syntax: <pre><code>singularity exec  --bind $HOME/test/data/data2:/mydata ./ubuntu.img ls -l /mydata \n</code></pre></p> <p>You can bind multiple folders simultaneously.\u201d <pre><code>mkdir ../data/data3\necho 'Create fourth file' &gt; ../data/data3/test31.txt\n\nsingularity exec  --bind $HOME/test/data/data2:/mydata,$HOME/test/data/data3:/tmp ./ubuntu.img ls -l  /mydata /tmp\n</code></pre></p> <p>You can use the environment variable <code>$SINGULARITY_BINDPATH</code>. <pre><code>export SINGULARITY_BINDPATH=$HOME/test/data/data2:/mydata,$HOME/test/data/data3:/tmp\nsingularity exec  ./ubuntu.img ls -l  /mydata /tmp\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#sharing-with-other","title":"Sharing with other","text":"<p>Once your container is ready, you can create a Singularity Image Format (SIF) file, which takes up less space, and share it with others. <pre><code>sudo singularity build ./ubuntu.sif ./ubuntu.img\n</code></pre></p>"},{"location":"blog/2024/10/27/container/#long-running-instances","title":"Long-running Instances","text":"<p>If you want to run the container as a service for an extended period, which is particularly useful for operating as a web server or managing a database, use an instance to run it in the background. <pre><code>singularity instance start lolcow_latest.sif cowsay 'I am within'\n</code></pre></p> <p>We can use the <code>instance list</code> command to show the currently running instances. <pre><code>singularity instance list \n</code></pre></p> <p>We can connect to running instances using the command <code>instance://&lt;name_of_instance&gt;</code>. <pre><code>singularity shell instance://cowsay \n</code></pre></p> <p>You can stop individual instances by using the command <code>instance stop &lt;name_of_instance&gt;</code> <pre><code>singularity instance stop  cowsay \n</code></pre></p>"},{"location":"blog/2024/10/27/container/#image-cache","title":"Image cache","text":"<p>Singularity does cache downloaded image files, which you can view using the singularity cache command: <pre><code>singularity cache list\n</code></pre></p> <p>You can remove images from the cache by using the <code>singularity cache clean</code> command.</p>"},{"location":"blog/2024/10/27/container/#docker","title":"Docker","text":"<p>While Docker is widely used and has a large user community, it requires root privileges for many of its functions, which can pose security and compatibility challenges in high-performance computing (HPC) environments. Consequently, HPC systems often prefer alternatives that allow for secure, unprivileged containerization.</p>"},{"location":"blog/2024/10/27/container/#useful-references","title":"Useful references","text":"<p>-[ref]:  https://hsf-training.github.io/hsf-training-singularity-webpage/</p>"},{"location":"blog/2024/10/27/how-drop-specific-columns/","title":"How drop specific columns","text":"<p>If you want to remove or keep specific columsn, you can <code>cut</code> command. </p> <p>Let  starts a new session and assigns it a name: <pre><code>cat &lt;&lt;EOF &gt; test.txt\nc1 c2 c3 c4 \n1 2 3 4\n1 2 3 4\n1 2 3 4\nEOF\n</code></pre></p> <p>For an simple case, let use <code>cut</code> to just keep the columns 2 and drop the rest from the text file,  you can use <code>cut -d ' ' -f2 test.txt</code>, here  <code>-d ' '</code> specifies the field delimiter\\space character instead of the tab character, which heresis . In the <code>-f</code> flag you can specifies the specific list of columns that are separated by .  <pre><code>$ cut -d ' ' -f2 test.txt\nc2\n2\n2\n2\n</code></pre> You can add more columns  <pre><code>$ cut -d ' ' -f2,4 test.txt\nc2 c4\n2 4\n2 4\n2 4\n</code></pre></p> <pre><code>$ cut -d ' ' -f 2-4 test.txt\nc2 c3 c4\n2 3 4\n2 3 4\n2 3 4\n</code></pre> <p>Now let revert that action and remove the second columns; use the previous command and add the <code>--complement</code> flag </p> <pre><code>$ cut -d ' ' --complement -f2 test.txt\nc1 c3 c4 \n1 3 4\n1 3 4\n1 3 4\n</code></pre> <pre><code>$ cut -d ' ' --complement -f2,4 test.txt\nc1 c3 \n1 3\n1 3\n1 3\n</code></pre> <p>You can use <code>-c</code>, to  selects only the characters specified.  Below cut command prints characters after 3<sup>rd</sup>. </p> <pre><code>$ cut -c  3-  test.txt\n c2 c3 c4 \n2 3 4\n2 3 4\n2 3 4\n</code></pre> <p>Below cut command prints characters btween 3<sup>rd</sup> and 6<sup>th</sup>.  <pre><code>cut -c  3-6  test.txt\n c2 \n2 3 \n2 3 \n2 3 \n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/","title":"Cheat sheet for markdown (Basics)","text":"<p>This Markdown cheat sheet provides a basic overview of all the Markdown.</p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#heading-1","title":"Heading 1","text":"<p>How:  <pre><code> # Heading 1\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#heading-2","title":"Heading 2","text":"<p>How:  <pre><code> ## Heading 2\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#heading-3","title":"Heading 3","text":"<p>How:  <pre><code> ### Heading 3\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#heading-4","title":"Heading 4","text":"<p>How:  <pre><code> #### Heading 4\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#heading-5","title":"Heading 5","text":"<p>How:  <pre><code> ##### Heading 5\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#emphasis","title":"Emphasis","text":"<p>Italic text How: <pre><code> *Italic text* or _Italic text_\n</code></pre> Bold text How: <pre><code> **Bold text** or __Bold text__\n</code></pre></p> <p>Strikethrough How: <pre><code>~~Strikethrough~~\n</code></pre></p> <p>blockquote</p> <p>blockquote How: <pre><code>&gt; blockquote\n&gt;&gt; blockquote\n</code></pre></p> <p>Color</p> <p>How:  <pre><code>&lt;span style=\"color:red\"&gt;Color&lt;/span&gt;\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#link","title":"Link","text":"<p>Link</p> <p>How:  <pre><code>[Link](http://www.google.com/)\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#code","title":"Code","text":"<p>inline <code>code</code> multiple lines of <code>codes</code></p> <p>How: <pre><code> `code`   \n    ```\n       codes\n    ```\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#list","title":"List","text":"<p>Unordered List - Bullet   - sub bullet     - Sub-sub bullet - Bullet   - sub bullet     - Sub-sub bullet</p> <p>How: <pre><code>Unordered List\n- Bullet\n  - sub bullet\n    - Sub-sub bullet\n- Bullet\n  - sub bullet\n    - Sub-sub bullet\n</code></pre></p> <ol> <li>Numbered list<ol> <li>Sub numbered list</li> <li>Sub numbered kist</li> </ol> </li> </ol> <p>How: <pre><code>1. Numbered list\n    1. Sub numbered list\n    2. Sub numbered kist\n</code></pre></p> <p>Task List - [ ] An uncompleted task - [x] A completed task</p> <p>How: <pre><code>- [ ] An uncompleted task\n- [x] A completed task\n</code></pre></p> <p>Horizontal line :</p> <p>How: <pre><code>-----\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#latex","title":"Latex","text":"<p>LATEX</p> <p></p> <p></p> <p>How: <pre><code>![E_0=mc^2](https://latex.codecogs.com/svg.latex?E_0=mc^2)\n\n&lt;img src=\"https://tex.s2cms.ru/svg/E_0=mc^2\" alt=\"E_0=mc^2\" /&gt;\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#table","title":"Table","text":"<p>Table:</p> header 1 header 2 Row 1 Values Row 2  continue Values <p>How: <pre><code>header 1  | header 2\n-------   | -------\nRow 1     |  Values\nRow 2 &lt;br&gt; continue    |  Values\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#image","title":"Image","text":"<p>Image:</p> <p></p> <p>How: <pre><code>![picture](https://raw.githubusercontent.com/saeidamiri1/saeidamiri1.github.io/master/public/favicon.ico)\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#foldable-text","title":"Foldable text","text":"Hidden materials <p> Put text here </p> <p>How: <pre><code>&lt;details&gt;\n&lt;summary&gt;Hidden materials&lt;/summary&gt;\n&lt;p&gt; Put text here &lt;/p&gt;\n&lt;/details&gt;\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#emoji-and-hotkey","title":"Emoji and Hotkey","text":"<p>How: <pre><code>  :+1:\n</code></pre> The complete list can be found at emoji list</p> <p>Hotkey: \u2318C</p> <p>How: <pre><code>  &lt;kbd&gt;\u2318C&lt;/kbd&gt;\n</code></pre></p> <p>common hotkey: \u2325(Option)\u2303(Control)\u2318(Command)\u21e7(Shift)\u21ea(Caps Lock) \u21e5(Tab) \u21a9(Return) \u232b(Delete)\u2191(Up)\u2193(Down)\u2190(Left)\u2192 (right)</p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#miscellaneous","title":"miscellaneous","text":""},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#comment","title":"Comment","text":"<p>How: <pre><code>&lt;!--\n Does not show\n--&gt;\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#indent","title":"indent","text":"<p>\u00a0 with indent </p> <p>How:  <pre><code>&amp;nbsp; with indent \n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#footnotes","title":"Footnotes","text":"<p>Need more <sup>1</sup> to say.</p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#new-line","title":"New line","text":"<p> How:  <pre><code>&lt;br/&gt;\n</code></pre></p>"},{"location":"blog/2024/09/28/cheat-sheet-for-markdown/#useful-references","title":"Useful references","text":"<p>-[ref1]:  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</p> <ol> <li> <p>This is the Footnote.\u00a0\u21a9</p> </li> </ol>"},{"location":"blog/2024/10/27/passwordless-ssh/","title":"passwordless ssh","text":"<p>We often use SSH (Secure Shell) to remotely connect to servers via the terminal. If you\u2019re tired of entering a password every time you log in, follow the steps below to enable passwordless login.</p>"},{"location":"blog/2024/10/27/passwordless-ssh/#add-server-info-to-config-file","title":"Add server info to config file","text":"<p>Open the SSH configuration file on your PC (the SSH client). <pre><code>vim $HOME/.ssh/config\n</code></pre></p> <p>Add the server name, IP address (hostname), and the user ID for the server to the configuration file: <pre><code>Host server1\nHostName 8.8.8.8\nUser usr1\n</code></pre></p>"},{"location":"blog/2024/10/27/passwordless-ssh/#generate-ssh-key","title":"generate ssh key","text":"<p>Run the following command to generate new SSH keys: <pre><code>ssh-keygen -t rsa\n</code></pre></p>"},{"location":"blog/2024/10/27/passwordless-ssh/#copy-key-to-server","title":"copy key to server","text":"<p>Run the following command to copy the key to server1, and enter your password when prompted: <pre><code>ssh-copy-id server1\n</code></pre></p> <p>You should now be able to log in to the server without entering a password. <pre><code>ssh server1\n</code></pre></p> <p>Note: if you are using powershell in windows, use <code>cat ~/.ssh/id_rsa.pub | ssh usr1@HostName \"mkdir ~/.ssh; cat &gt;&gt; ~/.ssh/authorized_keys\"</code></p>"},{"location":"blog/2024/10/27/screen-session/","title":"<code>screen</code> session","text":"<p>One very useful command allows you to push running terminal applications to the background and bring them back to the foreground when needed.  When a process is started with \u2018screen\u2019, the process can be detached from session &amp; then can reattach the session at a later time. When the session is detached, the process that was originally started from the screen is still running and managed by the screen itself. The process can then re-attach the session at a later time, and the terminals are still there, the way it was left. It also supports split-screen displays and works over SSH connections, even after disconnecting and reconnecting!</p> <p>Starts a new session and assigns it a name: <pre><code>screen -S test\n</code></pre></p> <p>Displays the list of sessions. <pre><code>screen -ls\n</code></pre></p> <p>Load the session  <pre><code>screen -r &lt;session_name&gt; \n</code></pre></p> <p>Forces detachment from another session. <pre><code>screen -dr &lt;session_name&gt;\n</code></pre></p> <p>Quits the screen session from outside the session. <pre><code>screen -XS &lt;session-name&gt; quit\n</code></pre></p> <p>Display the current session name:  <pre><code>echo $STY\n</code></pre></p> <p>You can split window vertically </p> <pre><code>Ctrl-a, Shift S # created vertical \nCtrl-a, Tab # move to another window\nCtrl-a, c # create new session\nCtrl-a, Shift X # close the window. \n</code></pre> <p>The following shows the shortcut and its action.</p> shortcut action Ctrl-a d Detach from the screen session Ctrl-a c Create a new window inside the screen session Ctrl-a a Switch to the window that you were previously on Ctrl-a \" List all open windows. Double-quotes \" are typed with the Shift key Ctrl-a Space Switch to the next window Ctrl-d Exit out of the current window Ctrl-a  Ctrl-esc How to scroll up and down"},{"location":"blog/2024/10/27/simple-static-website/","title":"simple static website","text":"<p>If you want to create a simple static website on GitHub, you can explore the following options:</p>"},{"location":"blog/2024/10/27/simple-static-website/#mkdocs","title":"MkDocs","text":"<p>MkDocs is a simple yet powerful static site generator written in Python. It allows you to create advanced static sites by preparing your documentation in standard Markdown format and feeding it into MkDocs.</p> <p>For theming for software,  you can use a simple theme like the MkDocs Bootswatch Themes. To get started with installation, follow the installation here.</p>"},{"location":"blog/2024/10/27/simple-static-website/#orderedlist","title":"orderedlist","text":"<p>The orderedlist minimal for GitHub Pages is built using HTML, and you can customize it with basic HTML knowledge. You can create your own copy and modify the [index.html] file to suit your needs. An example of a site using this theme can be found at DS-python-data-analysis.</p>"},{"location":"blog/2024/10/27/tr-command/","title":"<code>tr</code> command","text":"<p>The <code>tr</code> command is very useful command in deleteing or replaceing character</p>"},{"location":"blog/2024/10/27/tr-command/#replace-newline-with-comma","title":"Replace Newline with Comma","text":"<p>Let  starts a new session and assigns it a name: <pre><code>cat &lt;&lt;EOF &gt; test.txt\nc1 c2 c3 c4 \n1 2 3 4\n1 2 3 4\n1 2 3 4\nEOF\n</code></pre></p> <p>Run <code>cat test.txt | tr -s '\\n' ','</code>,  the <code>-s</code> flag determina what you wan to replace, here we interestted in new line <code>\\n</code> </p> <pre><code>% cat test.txt | tr -s '\\n' ','\nc1 c2 c3 c4 ,1 2 3 4,1 2 3 4,1 2 3 4,%    \n</code></pre>"},{"location":"blog/2024/10/27/tr-command/#drop-repeated-spaces","title":"drop repeated spaces","text":"<p>We use <code>tr -s ' '</code> to convert any repeated spaces into a single space:  <pre><code>cat &lt;&lt;EOF &gt; test2.txt\nc1 c2 c3    c4 \n1 2 3 4\n1 2 3 4\n1 2 3 4\nEOF\n</code></pre> cat test.txt | tr -s ' ' <pre><code>$ cat   test2.txt\nc1 c2 c3    c4 \n1 2 3 4\n1 2 3 4\n1 2 3 4\n$ cat test.txt | tr -s ' '\nc1 c2 c3 c4 \n1 2 3 4\n1 2 3 4\n1 2 3 4\nsamamiri@beluga1:~$ \n</code></pre></p>"},{"location":"blog/2024/10/27/tr-command/#specified-characters","title":"specified characters","text":"<pre><code>$ cat test.txt | tr  \"c1\" \"C5\"\nC5 C2 C3 C4 \n5 2 3 4\n5 2 3 4\n5 2 3 4\n</code></pre> <p>Let drop the digitals from file  <pre><code> cat test.txt | tr -d [:digit:]\nc c c c \n</code></pre></p> <p>Or invertly keep the digital  <pre><code> cat test.txt | tr -cd [:digit:]\n 1234123412341234\n</code></pre></p> <p>To convert characters from lower case to upper case, you can either specify a range of characters or use the predefined character classes. </p> <pre><code>echo \"hello\" | tr [:lower:] [:upper:]\nHELLO\necho \"Hello\" | tr [:upper:] [:lower:] \nhello\n</code></pre>"},{"location":"drac/","title":"Index","text":"<p>Here, I have compiled posts that are useful for students and researchers at the Montreal Neurological Institute-Hospital (Neuro) who often use DRAC. </p> <p>Most recent posts are: </p> <ul> <li>How I work with HPC</li> <li>Login issue in DRAC</li> </ul>"},{"location":"drac/2024/10/27/login-issues/","title":"Login Issues","text":"<p>If you're unable to log in to DRAC or if it gets stuck after entering your credentials, first check the status page for any reported incidents. If none are reported, the issue may be due to system slowness, which DRAC may be able to resolve. If you are still in the terminal, press Ctrl+C to interrupt, then try logging in again and performing basic operations, as the system may be slow.</p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/","title":"How I work with HPC","text":"<p>I want to share my expering of using HPC, as mr my day-to-day server for all my needs, you need 1- editor and 2- a cloud storage browser, what I use vscode and cyberducks</p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/#vscode","title":"vscode","text":"<p>Current research, especially for Bioinformatics, the coding may not be done solely using a specifics programming language e.g., R and will likely use different programming languages; hence, having a modern integrated development environment (IDE) is very important. Vscode editor is a modern IDE that is developed by microsoft. I used it as text editor and coding, I am pretty sure you will like.  Do the following steps to have a standard editor. </p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/#connect-to-github","title":"connect to github","text":"<p>To save your setting and have the extension from every where connect your editor to Github. </p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/#install","title":"Install","text":"<p>install the extension <code>Remote - SSH</code>,  <code>Remote - Tunnels</code>,  and <code>Remote - SSH: Editing Configuration Files</code>, you can find right extension for you need, for instance, if you you want to use python, install <code>python</code> extension by microsoft. </p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/#shortcut","title":"shortcut","text":"<p>vscode has many useful shortcut, they are accessble via <code>setting &gt; keyboard shortcuts</code>, you can change them. </p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/#termianl","title":"termianl","text":"<p>There is a menu that is called terminal,  you can use it to add a terminal in the below of editor </p>"},{"location":"drac/2024/10/28/how-i-work-with-hpc/#cyberducks","title":"cyberducks","text":""},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/linux/","title":"linux","text":""},{"location":"blog/category/ssh/","title":"ssh","text":""},{"location":"blog/category/website/","title":"website","text":""},{"location":"blog/category/markdown/","title":"Markdown","text":""},{"location":"drac/archive/2024/","title":"2024","text":""},{"location":"drac/category/ssh/","title":"ssh","text":""},{"location":"drac/category/hpc/","title":"hpc","text":""}]}